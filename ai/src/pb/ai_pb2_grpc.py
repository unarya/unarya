# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ai_pb2 as ai__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ai_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AIInferenceStub(object):
    """============================================================
    AIInference Service
    ============================================================
    This service handles AI model inference, including single predictions,
    batch predictions, model reloading, and runtime status checks.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/pb.aipb.AIInference/Predict',
                request_serializer=ai__pb2.PredictRequest.SerializeToString,
                response_deserializer=ai__pb2.PredictResponse.FromString,
                _registered_method=True)
        self.PredictBatch = channel.unary_unary(
                '/pb.aipb.AIInference/PredictBatch',
                request_serializer=ai__pb2.PredictBatchRequest.SerializeToString,
                response_deserializer=ai__pb2.PredictBatchResponse.FromString,
                _registered_method=True)
        self.ReloadModel = channel.unary_unary(
                '/pb.aipb.AIInference/ReloadModel',
                request_serializer=ai__pb2.ReloadModelRequest.SerializeToString,
                response_deserializer=ai__pb2.ReloadModelResponse.FromString,
                _registered_method=True)
        self.Status = channel.unary_unary(
                '/pb.aipb.AIInference/Status',
                request_serializer=ai__pb2.StatusRequest.SerializeToString,
                response_deserializer=ai__pb2.StatusResponse.FromString,
                _registered_method=True)


class AIInferenceServicer(object):
    """============================================================
    AIInference Service
    ============================================================
    This service handles AI model inference, including single predictions,
    batch predictions, model reloading, and runtime status checks.
    """

    def Predict(self, request, context):
        """Perform a single prediction (one input â†’ one output)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictBatch(self, request, context):
        """Perform multiple predictions in a batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadModel(self, request, context):
        """Reload or switch to a new model version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Query the current model status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIInferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=ai__pb2.PredictRequest.FromString,
                    response_serializer=ai__pb2.PredictResponse.SerializeToString,
            ),
            'PredictBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictBatch,
                    request_deserializer=ai__pb2.PredictBatchRequest.FromString,
                    response_serializer=ai__pb2.PredictBatchResponse.SerializeToString,
            ),
            'ReloadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadModel,
                    request_deserializer=ai__pb2.ReloadModelRequest.FromString,
                    response_serializer=ai__pb2.ReloadModelResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=ai__pb2.StatusRequest.FromString,
                    response_serializer=ai__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.aipb.AIInference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pb.aipb.AIInference', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIInference(object):
    """============================================================
    AIInference Service
    ============================================================
    This service handles AI model inference, including single predictions,
    batch predictions, model reloading, and runtime status checks.
    """

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.aipb.AIInference/Predict',
            ai__pb2.PredictRequest.SerializeToString,
            ai__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PredictBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.aipb.AIInference/PredictBatch',
            ai__pb2.PredictBatchRequest.SerializeToString,
            ai__pb2.PredictBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReloadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.aipb.AIInference/ReloadModel',
            ai__pb2.ReloadModelRequest.SerializeToString,
            ai__pb2.ReloadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.aipb.AIInference/Status',
            ai__pb2.StatusRequest.SerializeToString,
            ai__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AIServiceStub(object):
    """============================================================
    AIService
    ============================================================
    This service provides higher-level AI operations such as
    semantic or structural analysis of source code.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeCode = channel.unary_unary(
                '/pb.aipb.AIService/AnalyzeCode',
                request_serializer=ai__pb2.AIAnalyzeRequest.SerializeToString,
                response_deserializer=ai__pb2.AIAnalyzeResponse.FromString,
                _registered_method=True)


class AIServiceServicer(object):
    """============================================================
    AIService
    ============================================================
    This service provides higher-level AI operations such as
    semantic or structural analysis of source code.
    """

    def AnalyzeCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeCode': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeCode,
                    request_deserializer=ai__pb2.AIAnalyzeRequest.FromString,
                    response_serializer=ai__pb2.AIAnalyzeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.aipb.AIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pb.aipb.AIService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIService(object):
    """============================================================
    AIService
    ============================================================
    This service provides higher-level AI operations such as
    semantic or structural analysis of source code.
    """

    @staticmethod
    def AnalyzeCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.aipb.AIService/AnalyzeCode',
            ai__pb2.AIAnalyzeRequest.SerializeToString,
            ai__pb2.AIAnalyzeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
