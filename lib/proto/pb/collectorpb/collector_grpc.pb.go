// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: collector.proto

package collectorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectorService_CollectFromGit_FullMethodName     = "/collectorpb.CollectorService/CollectFromGit"
	CollectorService_CollectFromArchive_FullMethodName = "/collectorpb.CollectorService/CollectFromArchive"
	CollectorService_CollectFromURL_FullMethodName     = "/collectorpb.CollectorService/CollectFromURL"
	CollectorService_ValidateSource_FullMethodName     = "/collectorpb.CollectorService/ValidateSource"
)

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Collector Service ---
// Responsible for fetching, cloning, and validating source code repositories
type CollectorServiceClient interface {
	// Clone repository from Git (GitHub, GitLab, Bitbucket)
	CollectFromGit(ctx context.Context, in *GitRequest, opts ...grpc.CallOption) (*CollectorResponse, error)
	// Download and extract ZIP/TAR archives
	CollectFromArchive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*CollectorResponse, error)
	// Download files from HTTP/HTTPS
	CollectFromURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*CollectorResponse, error)
	// Validate incoming source URL
	ValidateSource(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) CollectFromGit(ctx context.Context, in *GitRequest, opts ...grpc.CallOption) (*CollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectorResponse)
	err := c.cc.Invoke(ctx, CollectorService_CollectFromGit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectFromArchive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*CollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectorResponse)
	err := c.cc.Invoke(ctx, CollectorService_CollectFromArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectFromURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*CollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectorResponse)
	err := c.cc.Invoke(ctx, CollectorService_CollectFromURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) ValidateSource(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, CollectorService_ValidateSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations must embed UnimplementedCollectorServiceServer
// for forward compatibility.
//
// --- Collector Service ---
// Responsible for fetching, cloning, and validating source code repositories
type CollectorServiceServer interface {
	// Clone repository from Git (GitHub, GitLab, Bitbucket)
	CollectFromGit(context.Context, *GitRequest) (*CollectorResponse, error)
	// Download and extract ZIP/TAR archives
	CollectFromArchive(context.Context, *ArchiveRequest) (*CollectorResponse, error)
	// Download files from HTTP/HTTPS
	CollectFromURL(context.Context, *URLRequest) (*CollectorResponse, error)
	// Validate incoming source URL
	ValidateSource(context.Context, *ValidateRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedCollectorServiceServer()
}

// UnimplementedCollectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorServiceServer struct{}

func (UnimplementedCollectorServiceServer) CollectFromGit(context.Context, *GitRequest) (*CollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectFromGit not implemented")
}
func (UnimplementedCollectorServiceServer) CollectFromArchive(context.Context, *ArchiveRequest) (*CollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectFromArchive not implemented")
}
func (UnimplementedCollectorServiceServer) CollectFromURL(context.Context, *URLRequest) (*CollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectFromURL not implemented")
}
func (UnimplementedCollectorServiceServer) ValidateSource(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSource not implemented")
}
func (UnimplementedCollectorServiceServer) mustEmbedUnimplementedCollectorServiceServer() {}
func (UnimplementedCollectorServiceServer) testEmbeddedByValue()                          {}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectorService_ServiceDesc, srv)
}

func _CollectorService_CollectFromGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectFromGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_CollectFromGit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectFromGit(ctx, req.(*GitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectFromArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectFromArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_CollectFromArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectFromArchive(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectFromURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectFromURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_CollectFromURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectFromURL(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_ValidateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).ValidateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_ValidateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).ValidateSource(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorService_ServiceDesc is the grpc.ServiceDesc for CollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collectorpb.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectFromGit",
			Handler:    _CollectorService_CollectFromGit_Handler,
		},
		{
			MethodName: "CollectFromArchive",
			Handler:    _CollectorService_CollectFromArchive_Handler,
		},
		{
			MethodName: "CollectFromURL",
			Handler:    _CollectorService_CollectFromURL_Handler,
		},
		{
			MethodName: "ValidateSource",
			Handler:    _CollectorService_ValidateSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}
